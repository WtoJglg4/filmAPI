// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	film_lib "github/film-lib"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user film_lib.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActor) CreateActor(actor film_lib.Actor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorMockRecorder) CreateActor(actor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActor)(nil).CreateActor), actor)
}

// DeleteActorById mocks base method.
func (m *MockActor) DeleteActorById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorById indicates an expected call of DeleteActorById.
func (mr *MockActorMockRecorder) DeleteActorById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorById", reflect.TypeOf((*MockActor)(nil).DeleteActorById), id)
}

// GetActorById mocks base method.
func (m *MockActor) GetActorById(id int) (film_lib.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorById", id)
	ret0, _ := ret[0].(film_lib.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorById indicates an expected call of GetActorById.
func (mr *MockActorMockRecorder) GetActorById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorById", reflect.TypeOf((*MockActor)(nil).GetActorById), id)
}

// GetActorsList mocks base method.
func (m *MockActor) GetActorsList() ([]film_lib.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsList")
	ret0, _ := ret[0].([]film_lib.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsList indicates an expected call of GetActorsList.
func (mr *MockActorMockRecorder) GetActorsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsList", reflect.TypeOf((*MockActor)(nil).GetActorsList))
}

// UpdateActorById mocks base method.
func (m *MockActor) UpdateActorById(name, gender, birthDate string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActorById", name, gender, birthDate, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActorById indicates an expected call of UpdateActorById.
func (mr *MockActorMockRecorder) UpdateActorById(name, gender, birthDate, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActorById", reflect.TypeOf((*MockActor)(nil).UpdateActorById), name, gender, birthDate, id)
}

// MockFilm is a mock of Film interface.
type MockFilm struct {
	ctrl     *gomock.Controller
	recorder *MockFilmMockRecorder
}

// MockFilmMockRecorder is the mock recorder for MockFilm.
type MockFilmMockRecorder struct {
	mock *MockFilm
}

// NewMockFilm creates a new mock instance.
func NewMockFilm(ctrl *gomock.Controller) *MockFilm {
	mock := &MockFilm{ctrl: ctrl}
	mock.recorder = &MockFilmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilm) EXPECT() *MockFilmMockRecorder {
	return m.recorder
}

// CreateFilm mocks base method.
func (m *MockFilm) CreateFilm(film film_lib.Film) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", film)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockFilmMockRecorder) CreateFilm(film any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockFilm)(nil).CreateFilm), film)
}

// DeleteFilmById mocks base method.
func (m *MockFilm) DeleteFilmById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilmById indicates an expected call of DeleteFilmById.
func (mr *MockFilmMockRecorder) DeleteFilmById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmById", reflect.TypeOf((*MockFilm)(nil).DeleteFilmById), id)
}

// GetFilmByPart mocks base method.
func (m *MockFilm) GetFilmByPart(parameter, req string) ([]film_lib.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmByPart", parameter, req)
	ret0, _ := ret[0].([]film_lib.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmByPart indicates an expected call of GetFilmByPart.
func (mr *MockFilmMockRecorder) GetFilmByPart(parameter, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmByPart", reflect.TypeOf((*MockFilm)(nil).GetFilmByPart), parameter, req)
}

// GetFilmsList mocks base method.
func (m *MockFilm) GetFilmsList(sort string) ([]film_lib.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsList", sort)
	ret0, _ := ret[0].([]film_lib.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsList indicates an expected call of GetFilmsList.
func (mr *MockFilmMockRecorder) GetFilmsList(sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsList", reflect.TypeOf((*MockFilm)(nil).GetFilmsList), sort)
}

// UpdateFilmById mocks base method.
func (m *MockFilm) UpdateFilmById(name, description, releaseDate string, rating, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmById", name, description, releaseDate, rating, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmById indicates an expected call of UpdateFilmById.
func (mr *MockFilmMockRecorder) UpdateFilmById(name, description, releaseDate, rating, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmById", reflect.TypeOf((*MockFilm)(nil).UpdateFilmById), name, description, releaseDate, rating, id)
}
